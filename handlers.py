from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
import aiohttp
import logging

from config import WEATHER_API_KEY, CALORIES_API_KEY

logger = logging.getLogger(__name__)

API_KEY = WEATHER_API_KEY
CALORIES_API = CALORIES_API_KEY
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class ProfileStates(StatesGroup):
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_age = State()
    waiting_for_activity_level = State()
    waiting_for_city = State()
    waiting_for_food_amount = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command('start'))
async def cmd_start(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã, –∫–∞–ª–æ—Ä–∏–π –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command('help'))
async def cmd_help(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await message.reply("–ö–æ–º–∞–Ω–¥—ã:\n"
                        "/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
                        "/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥—É\n"
                        "/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É\n"
                        "/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)> - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
                        "/check_progress - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(Command('set_profile'))
async def set_profile(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await state.set_state(ProfileStates.waiting_for_weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")

@router.message(ProfileStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight <= 0:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        await state.update_data(weight=weight)
        await state.set_state(ProfileStates.waiting_for_height)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    except ValueError as e:
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: {e}")

@router.message(ProfileStates.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        if height <= 0:
            raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        await state.update_data(height=height)
        await state.set_state(ProfileStates.waiting_for_age)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError as e:
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: {e}")

@router.message(ProfileStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age <= 0 or age > 120:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏ –º–µ–Ω—å—à–µ 121 –≥–æ–¥–∞")
        await state.update_data(age=age)
        await state.set_state(ProfileStates.waiting_for_activity_level)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å?")
    except ValueError as e:
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: {e}")

@router.message(ProfileStates.waiting_for_activity_level)
async def process_activity_level(message: Message, state: FSMContext):
    try:
        activity_level = int(message.text)
        if activity_level < 0:
            raise ValueError("–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        await state.update_data(activity_level=activity_level)
        await state.set_state(ProfileStates.waiting_for_city)
        await message.answer("–ù–∞–∫–æ–Ω–µ—Ü, –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
    except ValueError as e:
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: {e}")

@router.message(ProfileStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip().title()
    user_data = await state.get_data()
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
            async with session.get(url) as resp:
                if resp.status == 200:
                    weather_data = await resp.json()
                    temperature = weather_data['main']['temp']
                else:
                    raise ValueError("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
        return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ

    base_water_norm = user_data['weight'] * 30
    activity_bonus = user_data['activity_level'] // 30 * 500
    hot_weather_bonus = 500 if temperature > 25 else 0
    total_water_norm = base_water_norm + activity_bonus + hot_weather_bonus
    calories = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age']

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[message.from_user.id] = {
        'weight': user_data['weight'],
        'height': user_data['height'],
        'age': user_data['age'],
        'activity': user_data['activity_level'],
        'city': city,
        'water_goal': total_water_norm,
        'calorie_goal': calories,
        'logged_water': 0,
        'logged_calories': 0,
        'burned_calories': 0
    }

    await state.clear()
    await message.answer(
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
        f"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {total_water_norm} –º–ª.\n"
        f"–ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories} –∫–∫–∞–ª."
    )

# –õ–æ–≥ –≤–æ–¥—ã
@router.message(Command('log_water'))
async def log_water(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    try:
        args = message.text.split()
        if len(args) < 2:
            raise ValueError("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª.")
        water = int(args[1])
        if water <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        user_id = message.from_user.id
        if user_id not in users:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return

        user_data = users[user_id]
        user_data['logged_water'] += water
        remaining_water = max(0, user_data['water_goal'] - user_data['logged_water'])

        await message.answer(
            f"–í—ã –≤—ã–ø–∏–ª–∏ {user_data['logged_water']} –º–ª –≤–æ–¥—ã.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining_water} –º–ª –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã."
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –õ–æ–≥ –µ–¥—ã
@router.message(Command('log_food'))
async def log_food(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    try:
        args = message.text.split()
        if len(args) < 2:
            raise ValueError("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        product_name = " ".join(args[1:])

        async with aiohttp.ClientSession() as session:
            url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true"
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    products = data.get('products', [])
                    if products:
                        first_product = products[0]
                        food_name = first_product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        calories = first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
                        if calories == 0:
                            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ '{food_name}'.")
                            return
                        await message.answer(f"üçå {food_name} ‚Äî {calories} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
                        await state.set_state(ProfileStates.waiting_for_food_amount)
                        await state.update_data(calories=calories)
                    else:await message.answer(f"–ü—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                else:
                    raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
@router.message(ProfileStates.waiting_for_food_amount)
async def process_food_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        user_data = await state.get_data()
        calories_per_100g = user_data['calories']
        total_calories = (calories_per_100g * amount) / 100
        user_id = message.from_user.id
        if user_id not in users:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return

        user_data = users[user_id]
        user_data['logged_calories'] += total_calories
        remaining_calories = max(0, user_data['calorie_goal'] - user_data['logged_calories'])
        users[user_id] = user_data

        await state.clear()
        await message.answer(
            f"–í—ã —Å—ä–µ–ª–∏ {total_calories} –∫–∫–∞–ª.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –Ω–æ—Ä–º—ã: {remaining_calories} –∫–∫–∞–ª."
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –õ–æ–≥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.message(Command("log_workout"))
async def log_workout(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    _, _, command_args = message.text.partition('/log_workout ')
    args = command_args.split()  # —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

    if len(args) < 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>")
        return

    workout_type = ' '.join(args[:-1]).strip()  # —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    time_spent_str = args[-1].strip()  # –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

    if not time_spent_str.isdigit():
        await message.answer("–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    time_spent = int(time_spent_str)
    if time_spent <= 0:
        await message.answer("–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    async with aiohttp.ClientSession() as session:
        url = f"https://api.api-ninjas.com/v1/caloriesburned?activity={workout_type}&duration={time_spent}"
        headers = {"X-Api-Key": CALORIES_API}
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                calories_burned = data[0].get('total_calories', 0) if data else 0
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.")
                return

    # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–æ—Ä–º—ã –≤–æ–¥—ã
    water_needed = (time_spent // 30) * 200

    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = users[user_id]
    user_data['burned_calories'] += calories_burned
    user_data['water_goal'] += water_needed  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ—Ä–º—É –≤–æ–¥—ã
    users[user_id] = user_data

    await message.answer(
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è {workout_type.capitalize()} ({time_spent} –º–∏–Ω—É—Ç) ‚Äî {calories_burned:.1f} –∫–∫–∞–ª.\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {water_needed} –º–ª –≤–æ–¥—ã.\n\n"
        f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–ª. –≤–æ–¥—ã –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ –≤–∞—à–µ–π –Ω–æ—Ä–º–µ.'
    )

# –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command('check_progress'))
async def check_progress(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    user_data = users[user_id]

    water_logged = user_data['logged_water']
    water_goal = user_data['water_goal']
    water_remaining = max(0, water_goal - water_logged)

    calories_logged = user_data['logged_calories']
    calorie_goal = user_data['calorie_goal']
    calories_burned = user_data['burned_calories']
    calorie_balance = max(0, calorie_goal - calories_logged + calories_burned)

    await message.answer(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"–í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {water_logged} –º–ª –∏–∑ {water_goal} –º–ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {water_remaining} –º–ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {calories_logged} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {calories_burned} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {calorie_balance} –∫–∫–∞–ª."
    )