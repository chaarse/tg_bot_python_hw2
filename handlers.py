from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
import logging
from datetime import datetime
from config import WEATHER_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
router = Router()
storage = MemoryStorage()

API_KEY = WEATHER_API_KEY

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class ProfileStates(StatesGroup):
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_age = State()
    waiting_for_activity_level = State()
    waiting_for_city = State()
    waiting_for_food_weight = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_profiles = {}
user_water_logs = {}
user_food_logs = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –µ–¥–µ —á–µ—Ä–µ–∑ OpenFoodFacts API
async def get_food_info(product_name):
    url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                products = data.get('products', [])
                if products:
                    first_product = products[0]
                    return {
                        'name': first_product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'calories': first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
                    }
    return None

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command('start'))
async def cmd_start(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã, –∫–∞–ª–æ—Ä–∏–π –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
        "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command('help'))
async def cmd_help(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await message.reply(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥—É\n"
        "/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É\n"
        "/check_progress - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(Command('set_profile'))
async def set_profile(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await state.set_state(ProfileStates.waiting_for_weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")

@router.message(ProfileStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight <= 0:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        await state.update_data(weight=weight)
        await state.set_state(ProfileStates.waiting_for_height)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(ProfileStates.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        if height <= 0:
            raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        await state.update_data(height=height)
        await state.set_state(ProfileStates.waiting_for_age)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(ProfileStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age <= 0 or age > 120:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 1 –¥–æ 120")
        await state.update_data(age=age)
        await state.set_state(ProfileStates.waiting_for_activity_level)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å?")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(ProfileStates.waiting_for_activity_level)
async def process_activity_level(message: Message, state: FSMContext):
    try:
        activity_level = int(message.text)
        if activity_level < 0:
            raise ValueError("–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        await state.update_data(activity_level=activity_level)
        await state.set_state(ProfileStates.waiting_for_city)
        await message.answer("–ù–∞–∫–æ–Ω–µ—Ü, –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(ProfileStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip().title()
    user_data = await state.get_data()

    async with aiohttp.ClientSession() as session:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
        async with session.get(url) as resp:
            weather_data = await resp.json()
            temperature = weather_data['main']['temp']

    base_water_norm = user_data['weight'] * 30
    activity_bonus = user_data['activity_level'] // 30 * 500
    hot_weather_bonus = 500 if temperature > 25 else 0
    total_water_norm = base_water_norm + activity_bonus + hot_weather_bonus

    calories = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age']
    user_profiles[message.from_user.id] = {
        'weight': user_data['weight'],
        'height': user_data['height'],
        'age': user_data['age'],
        'activity_level': user_data['activity_level'],
        'city': city,
        'total_water_norm': total_water_norm,
        'calories': calories,
    }

    await state.clear()
    await message.answer(
        f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {total_water_norm} –º–ª.\n"
        f"–ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories} –∫–∫–∞–ª."
    )

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã
@router.message(Command('log_food'))
async def log_food(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω")
        return
    product_name = args[1]
    food_info = await get_food_info(product_name)

    if not food_info:
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    await state.update_data(food_name=food_info['name'], food_calories=food_info['calories'])
    await state.set_state(ProfileStates.waiting_for_food_weight)
    await message.answer(
        f"üç¥ {food_info['name']} ‚Äî {food_info['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
    )

@router.message(ProfileStates.waiting_for_food_weight)
async def process_food_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight <= 0:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        data = await state.get_data()
        calories = (data['food_calories'] / 100) * weight
        user_food_logs.setdefault(message.from_user.id, []).append({
            'name': data['food_name'],
            'weight': weight,
            'calories': calories
        })
        await state.clear()
        await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {calories:.2f} –∫–∫–∞–ª –∏–∑ {data['food_name']}.")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")