from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
import aiohttp
from datetime import datetime
from config import WEATHER_API_KEY, CALORIES_API_KEY

# –ö–ª—é—á–∏ API
API_KEY = WEATHER_API_KEY
CALORIES_API = CALORIES_API_KEY

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class ProfileStates(StatesGroup):
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_age = State()
    waiting_for_activity_level = State()
    waiting_for_city = State()
    waiting_for_food_amount = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_profiles = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã, –∫–∞–ª–æ—Ä–∏–π –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
        "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥—É\n"
        "/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É\n"
        "/check_progress - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)> - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await state.set_state(ProfileStates.waiting_for_weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")

@router.message(ProfileStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight <= 0:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        await state.update_data(weight=weight)
        await state.set_state(ProfileStates.waiting_for_height)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞.")

@router.message(ProfileStates.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        if height <= 0:
            raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        await state.update_data(height=height)
        await state.set_state(ProfileStates.waiting_for_age)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞.")

@router.message(ProfileStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age <= 0 or age > 120:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏ –º–µ–Ω—å—à–µ 121 –≥–æ–¥–∞")
        await state.update_data(age=age)
        await state.set_state(ProfileStates.waiting_for_activity_level)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å?")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞.")

@router.message(ProfileStates.waiting_for_activity_level)
async def process_activity_level(message: Message, state: FSMContext):
    try:
        activity_level = int(message.text)
        if activity_level < 0:
            raise ValueError("–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        await state.update_data(activity_level=activity_level)
        await state.set_state(ProfileStates.waiting_for_city)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")

@router.message(ProfileStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip().title()
    user_data = await state.get_data()

    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
            async with session.get(url) as resp:
                if resp.status == 200:
                    weather_data = await resp.json()
                    temperature = weather_data['main']['temp']
                else:
                    raise ValueError("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    base_water_norm = user_data['weight'] * 30
    activity_bonus = (user_data['activity_level'] // 30) * 500
    hot_weather_bonus = 500 if temperature > 25 else 0
    total_water_norm = base_water_norm + activity_bonus + hot_weather_bonus
    calories = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age']

    user_data.update({
        'city': city,
        'total_water_norm': total_water_norm,
        'calories': calories,
        'last_update': datetime.now(),
        'calories_consumed': 0
    })

    user_profiles[message.from_user.id] = user_data
    await state.clear()
    await message.answer(
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
        f"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {total_water_norm:.1f} –º–ª.\n"
        f"–ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories:.1f} –∫–∫–∞–ª."
    )

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.message(Command("log_workout"))
async def log_workout(message: Message):
    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            raise ValueError("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö.")

        workout_type = args[1]
        time_spent = int(args[2])

        if time_spent <= 0:
            raise ValueError("–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        async with aiohttp.ClientSession() as session:
            url = f"https://api.api-ninjas.com/v1/caloriesburned?activity={workout_type}&duration={time_spent}"
            headers = {"X-Api-Key": CALORIES_API}
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    calories_burned = data[0].get('total_calories', 0) if data else 0
                else:
                    raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.")

        water_needed = (time_spent // 30) * 200
        await message.answer(
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è {workout_type.capitalize()} ({time_spent} –º–∏–Ω—É—Ç) ‚Äî {calories_burned:.1f} –∫–∫–∞–ª.\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {water_needed} –º–ª –≤–æ–¥—ã."
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")